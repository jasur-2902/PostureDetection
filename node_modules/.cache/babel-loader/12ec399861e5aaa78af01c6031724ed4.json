{"ast":null,"code":"var _jsxFileName = \"/Users/androiddeveloper/Documents/GitHub/PostureML/src/Dashboard.js\";\n\n/*global chrome*/\nimport React, { Component } from 'react';\nimport App from './App';\nimport firebase from \"./firebase/config\";\nimport 'firebase/database';\nimport NewWindow from 'react-new-window';\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videoPermission: false,\n      notificationPermission: false,\n      notificationIds: [],\n      trackPosture: false\n    };\n    this.handleNotification = this.handleNotification.bind(this);\n    this.handleTracking = this.handleTracking.bind(this);\n  }\n\n  handleNotification() {\n    let _this = this;\n\n    let options = {\n      type: \"basic\",\n      iconUrl: \"./logo192.png\",\n      title: \"PostureML\",\n      message: \"Uh-Oh! Fix your posture!\",\n      priority: 2,\n      buttons: [{\n        title: \"Reset posture\"\n      }]\n    };\n    chrome.notifications.create(options, function (notificationId) {\n      _this.setState(state => {\n        return {\n          notificationIds: [...state.notificationIds, notificationId]\n        };\n      });\n    });\n  }\n\n  handleTracking() {\n    this.setState({\n      trackPosture: true\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.state.trackPosture && React.createElement(NewWindow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(App, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.handleTracking,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Track Posture\"), React.createElement(\"button\", {\n      onClick: this.handleNotification,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Test push notifications\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/androiddeveloper/Documents/GitHub/PostureML/src/Dashboard.js"],"names":["React","Component","App","firebase","NewWindow","Dashboard","constructor","props","state","videoPermission","notificationPermission","notificationIds","trackPosture","handleNotification","bind","handleTracking","_this","options","type","iconUrl","title","message","priority","buttons","chrome","notifications","create","notificationId","setState","render"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,eAAe,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAC/CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE,KADN;AAEXC,MAAAA,sBAAsB,EAAE,KAFb;AAGXC,MAAAA,eAAe,EAAE,EAHN;AAIXC,MAAAA,YAAY,EAAE;AAJH,KAAb;AAMA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACD;;AAEDD,EAAAA,kBAAkB,GAAG;AACnB,QAAIG,KAAK,GAAG,IAAZ;;AACA,QAAIC,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAE,OADM;AAEZC,MAAAA,OAAO,EAAE,eAFG;AAGZC,MAAAA,KAAK,EAAE,WAHK;AAIZC,MAAAA,OAAO,EAAE,0BAJG;AAKZC,MAAAA,QAAQ,EAAE,CALE;AAMZC,MAAAA,OAAO,EAAE,CACP;AAAEH,QAAAA,KAAK,EAAE;AAAT,OADO;AANG,KAAd;AAWAI,IAAAA,MAAM,CAACC,aAAP,CAAqBC,MAArB,CAA4BT,OAA5B,EAAqC,UAASU,cAAT,EAAyB;AAC5DX,MAAAA,KAAK,CAACY,QAAN,CAAepB,KAAK,IAAI;AACtB,eAAO;AACLG,UAAAA,eAAe,EAAE,CAAC,GAAGH,KAAK,CAACG,eAAV,EAA2BgB,cAA3B;AADZ,SAAP;AAGD,OAJD;AAKD,KAND;AAOD;;AAEDZ,EAAAA,cAAc,GAAG;AACf,SAAKa,QAAL,CAAc;AACZhB,MAAAA,YAAY,EAAE;AADF,KAAd;AAGD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,WACE,0CACG,KAAKrB,KAAL,CAAWI,YAAX,IACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFJ,EAME;AAAQ,MAAA,OAAO,EAAE,KAAKG,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANF,EAOE;AAAQ,MAAA,OAAO,EAAE,KAAKF,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAPF,CADF;AAWD;;AArD8C","sourcesContent":["/*global chrome*/\n\nimport React, { Component } from 'react';\nimport App from './App';\nimport firebase from \"./firebase/config\";\nimport 'firebase/database';\nimport NewWindow from 'react-new-window'\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videoPermission: false,\n      notificationPermission: false,\n      notificationIds: [],\n      trackPosture: false,\n    }\n    this.handleNotification = this.handleNotification.bind(this);\n    this.handleTracking = this.handleTracking.bind(this);\n  }\n\n  handleNotification() {\n    let _this = this;\n    let options = {\n      type: \"basic\",\n      iconUrl: \"./logo192.png\",\n      title: \"PostureML\",\n      message: \"Uh-Oh! Fix your posture!\",\n      priority: 2,\n      buttons: [\n        { title: \"Reset posture\" }\n      ]\n    }\n\n    chrome.notifications.create(options, function(notificationId) {\n      _this.setState(state => {\n        return {\n          notificationIds: [...state.notificationIds, notificationId]\n        }\n      });\n    })\n  }\n\n  handleTracking() {\n    this.setState({\n      trackPosture: true,\n    })\n  }\n\n  render() {\n    return(\n      <>\n        {this.state.trackPosture &&\n          <NewWindow>\n            <App />\n          </NewWindow>\n        }\n        <button onClick={this.handleTracking}>Track Posture</button>\n        <button onClick={this.handleNotification}>Test push notifications</button>\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}