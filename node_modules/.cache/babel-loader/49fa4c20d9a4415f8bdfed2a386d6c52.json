{"ast":null,"code":"var _jsxFileName = \"/Users/androiddeveloper/Documents/GitHub/PostureML/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\nlet net = null;\n\nasync function estimatePoseOnImage(imageElement) {\n  // load the posenet model from a checkpoint\n  // const net = await posenet.load();\n  const pose = await net.estimateSinglePose(imageElement, {\n    flipHorizontal: false\n  });\n  return pose;\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.webcamRef = React.createRef();\n    this.state = {\n      \"image\": null\n    };\n  }\n\n  formatImage() {\n    return \"data:image/png;base64,\" + this.state.image;\n  }\n\n  async componentDidMount() {\n    net = await posenet.load();\n  }\n\n  getScreenshot() {\n    // const capture = React.useCallback(\n    //     () => {\n    //       const imageSrc = this.webcamRef.current.getScreenshot();\n    //     },\n    //     [this.webcamRef]\n    //   );\n    const sshot = this.webcamRef.current.getScreenshot();\n    const img = document.createElement(\"img\");\n    img.src = sshot;\n    setTimeout(async function test() {\n      // const img = document.getElementById(\"img\");\n      const pose = await estimatePoseOnImage(img);\n      console.log(pose);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.getScreenshot(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Click Me!\"), React.createElement(Webcam, {\n      audio: false,\n      height: 480,\n      ref: this.webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      width: 960,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/androiddeveloper/Documents/GitHub/PostureML/src/App.js"],"names":["React","posenet","Webcam","net","estimatePoseOnImage","imageElement","pose","estimateSinglePose","flipHorizontal","App","Component","constructor","props","webcamRef","createRef","state","formatImage","image","componentDidMount","load","getScreenshot","sshot","current","img","document","createElement","src","setTimeout","test","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,OAAZ,MAAyB,4BAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,IAAIC,GAAG,GAAG,IAAV;;AAEA,eAAeC,mBAAf,CAAmCC,YAAnC,EAAiD;AAC7C;AACA;AAEA,QAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,kBAAJ,CAAuBF,YAAvB,EAAqC;AACpDG,IAAAA,cAAc,EAAE;AADoC,GAArC,CAAnB;AAGA,SAAOF,IAAP;AACH;;AAGD,eAAe,MAAMG,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAC7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBb,KAAK,CAACc,SAAN,EAAjB;AACA,SAAKC,KAAL,GAAa;AACT,eAAS;AADA,KAAb;AAGH;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAO,2BAA2B,KAAKD,KAAL,CAAWE,KAA7C;AACH;;AACD,QAAMC,iBAAN,GAA0B;AACtBf,IAAAA,GAAG,GAAG,MAAMF,OAAO,CAACkB,IAAR,EAAZ;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,KAAK,GAAG,KAAKR,SAAL,CAAeS,OAAf,CAAuBF,aAAvB,EAAd;AACA,UAAMG,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAF,IAAAA,GAAG,CAACG,GAAJ,GAAUL,KAAV;AACAM,IAAAA,UAAU,CAAC,eAAeC,IAAf,GAAsB;AAC7B;AACA,YAAMtB,IAAI,GAAG,MAAMF,mBAAmB,CAACmB,GAAD,CAAtC;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAZ;AACH,KAJS,CAAV;AAKH;;AACDyB,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAE,KADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,GAAG,EAAE,KAAKP,SAHd;AAII,MAAA,gBAAgB,EAAC,YAJrB;AAKI,MAAA,KAAK,EAAE,GALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAYH;;AA3C4C","sourcesContent":["import React from 'react';\nimport './App.css';\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\n\nlet net = null;\n\nasync function estimatePoseOnImage(imageElement) {\n    // load the posenet model from a checkpoint\n    // const net = await posenet.load();\n\n    const pose = await net.estimateSinglePose(imageElement, {\n        flipHorizontal: false\n    });\n    return pose;\n}\n\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.webcamRef = React.createRef();\n        this.state = {\n            \"image\": null\n        }\n    }\n    formatImage() {\n        return \"data:image/png;base64,\" + this.state.image;\n    }\n    async componentDidMount() {\n        net = await posenet.load();\n    }\n    getScreenshot() {\n        // const capture = React.useCallback(\n        //     () => {\n        //       const imageSrc = this.webcamRef.current.getScreenshot();\n        //     },\n        //     [this.webcamRef]\n        //   );\n        const sshot = this.webcamRef.current.getScreenshot();\n        const img = document.createElement(\"img\");\n        img.src = sshot;\n        setTimeout(async function test() {\n            // const img = document.getElementById(\"img\");\n            const pose = await estimatePoseOnImage(img);\n            console.log(pose);\n        })\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <button onClick={() => this.getScreenshot()}>Click Me!</button>\n                <Webcam\n                    audio={false}\n                    height={480}\n                    ref={this.webcamRef}\n                    screenshotFormat=\"image/jpeg\"\n                    width={960}\n                />\n            </div>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}