import * as React from "react";
interface WebcamProps {
    audio: boolean;
    audioConstraints?: MediaStreamConstraints["audio"];
    imageSmoothing: boolean;
    mirrored?: boolean;
    minScreenshotHeight?: number;
    minScreenshotWidth?: number;
    onUserMedia: () => void;
    onUserMediaError: (error: string) => void;
    screenshotFormat: "image/webp" | "image/png" | "image/jpeg";
    screenshotQuality: number;
    videoConstraints?: MediaStreamConstraints["video"];
}
interface WebcamState {
    hasUserMedia: boolean;
    src?: string;
}
export default class Webcam extends React.Component<WebcamProps & React.HTMLAttributes<HTMLVideoElement>, WebcamState> {
    static defaultProps: {
        audio: boolean;
        imageSmoothing: boolean;
        mirrored: boolean;
        onUserMedia: () => void;
        onUserMediaError: () => void;
        screenshotFormat: string;
        screenshotQuality: number;
    };
    static mountedInstances: Webcam[];
    static userMediaRequested: boolean;
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D | null;
    stream: MediaStream;
    video: HTMLVideoElement | null;
    constructor(props: any);
    componentDidMount(): void;
    componentDidUpdate(nextProps: any): void;
    componentWillUnmount(): void;
    getScreenshot(): string | null;
    getCanvas(): HTMLCanvasElement | null;
    requestUserMedia(): void;
    handleUserMedia(err: any, stream?: MediaStream): void;
    render(): JSX.Element;
}
export {};
